#!/usr/bin/env bash
set -eo pipefail
export DOKKU_ROOT=${DOKKU_ROOT:="/home/dokku"}
export PLUGIN_PATH=${PLUGIN_PATH:="/var/lib/dokku/plugins"}

[[ -f $DOKKU_ROOT/dokkurc ]] && source $DOKKU_ROOT/dokkurc

[[ $DOKKU_TRACE ]] && set -x

if [[ $(id -un) != "dokku" && $1 != "plugins-install" ]]; then
  sudo -u dokku -H $0 "$@"
  exit
fi

case "$1" in
  receive)
    APP="$2"; IMAGE="dokku/$APP"
    echo "-----> Cleaning up ..."
    dokku cleanup
    echo "-----> Building $APP ..."
    cat | dokku build $APP
    echo "-----> Releasing $APP ..."
    dokku release $APP
    echo "-----> Deploying $APP ..."
    dokku deploy $APP
    echo "=====> Application deployed:"
    echo "       $(dokku url $APP)"
    echo
    ;;

  build)
    APP="$2"; IMAGE="dokku/$APP"; CACHE_DIR="$DOKKU_ROOT/$APP/cache"
    # Support for Dockerfile Containers
    GITARCHIVE=/tmp/$$.tar
    cat > "$GITARCHIVE"
    # Verify if it is a Docker Container to be built
    set +e
    tar tvf "$GITARCHIVE" Dockerfile > /dev/null 2>&1 ; CODE=$?
    set -e
    if [[ "$CODE" == "0" ]] ; then
      echo "-----> Docker Container"
      GITARCHIVEDIR="/tmp/$$"
      mkdir -p "$GITARCHIVEDIR"
      cd "$GITARCHIVEDIR"
      echo "       Extracting the Docker Container $APP"
      tar xf "$GITARCHIVE" > /dev/null 2>&1
      echo "       Building the Docker Container $IMAGE"
      docker build --rm -t $IMAGE .  | sed -e 's/^/         /'
      if [[ -r "Dockinfo" ]] ; then
        echo "       Copying Dockinfo to $DOKKU_ROOT/$APP/"
        cp Dockinfo "$DOKKU_ROOT/$APP/"
      fi
      rm -rf "$GITARCHIVEDIR"
    else
      #
      id=$(cat "$GITARCHIVE" | docker run -i -a stdin progrium/buildstep /bin/bash -c "mkdir -p /app && tar -xC /app")
      test $(docker wait $id) -eq 0
      docker commit $id $IMAGE > /dev/null
      [[ -d $CACHE_DIR ]] || mkdir $CACHE_DIR
      pluginhook pre-build $APP
      id=$(docker run -d -v $CACHE_DIR:/cache $IMAGE /build/builder)
      docker attach $id
      test $(docker wait $id) -eq 0
      docker commit $id $IMAGE > /dev/null
    fi
    rm -rf "$GITARCHIVE"
    pluginhook post-build $APP
    ;;

  release)
    APP="$2"; IMAGE="dokku/$APP"
    pluginhook pre-release $APP
    if [[ -f "$DOKKU_ROOT/$APP/ENV" ]]; then
      id=$(cat "$DOKKU_ROOT/$APP/ENV" | docker run -i -a stdin $IMAGE /bin/bash -c "mkdir -p /app/.profile.d && cat > /app/.profile.d/app-env.sh")
      test $(docker wait $id) -eq 0
      docker commit $id $IMAGE > /dev/null
    fi
    pluginhook post-release $APP
    ;;

  deploy)
    APP="$2"; IMAGE="dokku/$APP"
    pluginhook pre-deploy $APP

    # kill the app when running
    if [[ -f "$DOKKU_ROOT/$APP/CONTAINER" ]]; then
      oldid=$(< "$DOKKU_ROOT/$APP/CONTAINER")
      containername=`docker inspect $oldid | grep Name | cut -f4 -d'"' | cut -f2 -d/`
      docker inspect $oldid &> /dev/null && docker kill $oldid > /dev/null && docker rm $containername > /dev/null
    fi

    if [[ -f "$DOKKU_ROOT/$APP/Dockinfo" ]]; then
        echo "       Deploying Docker Container"
        NAME=`grep ^name $DOKKU_ROOT/$APP/Dockinfo | cut -f2-999 -d: | sed "s/\\$APP/$APP/g"` || true
        if [ "$NAME" != "" ] ; then 
            echo $NAME > "$DOKKU_ROOT/$APP/NAME"
            OPTNAME="--name $NAME"
        fi
        PORT=`grep ^port $DOKKU_ROOT/$APP/Dockinfo | cut -f2-999 -d:` || true
        if [ "$PORT" != "" ] ; then 
            OPTPORT="-p $PORT"
        fi
        LINK=`grep ^link $DOKKU_ROOT/$APP/Dockinfo | cut -f2-999 -d:` || true
        if [ "$LINK" != "" ] ; then 
            OPTLINK="--link $LINK"
        fi
        VOLUME=`grep ^volume $DOKKU_ROOT/$APP/Dockinfo | cut -f2-999 -d:` || true
        if [ "$VOLUME" != "" ] ; then 
            OPTVOLUME="--vol $VOLUME"
        fi
        OPTIONS=`grep ^options $DOKKU_ROOT/$APP/Dockinfo | cut -f2-999 -d: | sed "s/\\$APP/$APP/g"` || true
        DOCKER_ARGS=$(: | pluginhook docker-args $APP)
        echo "       Starting the Docker Container: docker run -d $DOCKER_ARGS $OPTNAME $OPTPORT $OPTLINK $OPTVOLUME $OPTIONS $IMAGE"
        id=$(docker run -d $DOCKER_ARGS $OPTNAME $OPTPORT $OPTLINK $OPTVOLUME $OPTIONS $IMAGE)
        echo $id > "$DOKKU_ROOT/$APP/CONTAINER"
        if [[ "$PORT" != "" && `echo $PORT | grep -v :` ]] ; then
            port=$(docker port $id $PORT | sed 's/0.0.0.0://')
            echo $port > "$DOKKU_ROOT/$APP/PORT"
            echo "http://$(< "$DOKKU_ROOT/HOSTNAME"):$port" > "$DOKKU_ROOT/$APP/URL"
        fi
        docker logs $id 2>&1 | sed -e 's/^/        /'
    else

      # start the app
      DOCKER_ARGS=$(: | pluginhook docker-args $APP)
      id=$(docker run -d -p 5000 -e PORT=5000 $DOCKER_ARGS $IMAGE /bin/bash -c "/start web")
      echo $id > "$DOKKU_ROOT/$APP/CONTAINER"
      port=$(docker port $id 5000 | sed 's/0.0.0.0://')
      echo $port > "$DOKKU_ROOT/$APP/PORT"
      echo "http://$(< "$DOKKU_ROOT/HOSTNAME"):$port" > "$DOKKU_ROOT/$APP/URL"
    fi
    pluginhook post-deploy $APP $port
    ;;

  cleanup)
    # delete all non-running container
    docker ps -a | grep 'Exit' |  awk '{print $1}' | xargs docker rm &> /dev/null &
    # delete unused images
    docker images | grep '<none>' |  awk '{print $3}'  | xargs docker rmi &> /dev/null &
    ;;

  plugins)
    ls -1 -d $PLUGIN_PATH/*/
    ;;

  plugins-install)
    pluginhook install
    ;;

  # temporary hack for https://github.com/progrium/dokku/issues/82
  deploy:all)
    for app in $(ls -d $DOKKU_ROOT/*/); do
      APP=$(basename $app);
      dokku deploy $APP
    done
    ;;

  help)
    cat<<EOF | pluginhook commands help | sort
    help            Print the list of commands
    plugins         Print active plugins
    plugins-install Install active plugins
EOF
    ;;

  *)
    for script in $(ls -d /var/lib/dokku/plugins/*/commands); do
      $script "$@"
    done
    ;;

esac
